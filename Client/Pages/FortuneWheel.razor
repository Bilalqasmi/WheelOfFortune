@page "/"
@page "/wheel"
@using BlazorApp.Shared
@inject IJSRuntime JSRuntime

<div class="container mx-auto p-4">
    <h1 class="text-4xl mb-8 bg-clip-text text-transparent bg-gradient-to-r from-fuchsia-500 to-cyan-500">
        Roue de la Fortune
    </h1>

    <div class="wheel-container mb-6">
        <img src="images/wheel.png" id="fortuneWheel" alt="Roue de la Fortune" class="w-84 h-84 mx-auto" />
        <div class="needle"></div>
    </div>

    <div class="flex flex-col items-center gap-4">
        @if (!isSpinning)
        {
            <div class="flex gap-4 items-center">
                <input id="designationInput" @bind="couponCode" class="h-12 min-w-[12rem] rounded-lg border-emerald-500 indent-4 text-emerald-900 shadow-lg focus:outline-none focus:ring focus:ring-emerald-600 transition delay-150 duration-300 ease-in-out" type="text" placeholder="veillez saisir votre code" />
                <button @onclick="ValidateCoupon" id="spinButton" class="text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-4 py-2 text-center me-2 mb-2">
                    Valider
                </button>
            </div>
        }
        else
        {
            <div class="flex gap-4 items-center">
                <button @onclick="ResetWheel" id="resetButton" class="text-white bg-gradient-to-br from-purple-600 to-blue-500 hover:bg-gradient-to-bl focus:ring-4 focus:outline-none focus:ring-blue-300 dark:focus:ring-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center me-2 mb-2 z-10">
                    Recommencer
                </button>

            </div>
        }


    </div>

    <div class="result-message mt-4 underline  ">
        <p class="text-white">@resultMessage</p>
    </div>
</div>


@code {
    private string resultMessage;
    private string couponCode;
    private bool isSpinning = false;
    private string finalMessage;

    private async Task ValidateCoupon()
    {
        var response = await codeValidation.CheckCodeValidation(new CouponRequest { CouponCode = couponCode });

        if (response != null)
        {
            finalMessage = response.Message;

            int degrees = new Random().Next(360); 
            if (response.IsSuccess)
            {
                degrees = new Random().Next(60, 120); 
            }
            else if (response.IsUsed)
            {
                degrees = new Random().Next(120, 240); 
            }
            else
            {
                degrees = new Random().Next(240, 300); 
            }


            var dotNetObjRef = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("spinWheel", degrees, dotNetObjRef);

            isSpinning = true;
            resultMessage = ""; 
            StateHasChanged();
        }
    }

    [JSInvokable]
    public async Task OnSpinCompleted()
    {
        await Task.Delay(1000);
        resultMessage = finalMessage;
        StateHasChanged();
    }

    private async Task ResetWheel()
    {
        resultMessage = string.Empty;
        couponCode = string.Empty;
        isSpinning = false;

        await JSRuntime.InvokeVoidAsync("resetWheel");
        StateHasChanged();
    }
}
